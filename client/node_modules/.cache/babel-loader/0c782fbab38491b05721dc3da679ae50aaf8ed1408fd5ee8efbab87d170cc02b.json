{"ast":null,"code":"var _jsxFileName = \"/Users/lloydhird/development/PKSyllabus/client/src/components/PublicBeltSection.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport PublicCategorySection from './PublicCategorySection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PublicBeltSection = ({\n  belt,\n  categories,\n  cumulativeCategories,\n  isExpanded,\n  onToggleExpand,\n  searchTerm,\n  isVisible\n}) => {\n  _s();\n  const [isExpandedState, setIsExpanded] = useState(isExpanded);\n\n  // Get belt color based on belt name\n  const getBeltColor = beltName => {\n    const beltColors = {\n      'Red Belt': {\n        background: 'linear-gradient(135deg, #dc7373 0%, #c85a5a 100%)',\n        hover: 'linear-gradient(135deg, #d66666 0%, #c24d4d 100%)'\n      },\n      'Yellow Belt': {\n        background: 'linear-gradient(135deg, #f4d03f 0%, #f1c40f 100%)',\n        hover: 'linear-gradient(135deg, #f2ca2e 0%, #e8b800 100%)'\n      },\n      'Orange Belt': {\n        background: 'linear-gradient(135deg, #f39c12 0%, #e67e22 100%)',\n        hover: 'linear-gradient(135deg, #f08c00 0%, #d35400 100%)'\n      },\n      'Green Belt': {\n        background: 'linear-gradient(135deg, #58d68d 0%, #27ae60 100%)',\n        hover: 'linear-gradient(135deg, #4dd080 0%, #229954 100%)'\n      },\n      'Blue Belt': {\n        background: 'linear-gradient(135deg, #5dade2 0%, #3498db 100%)',\n        hover: 'linear-gradient(135deg, #52a3dd 0%, #2e86c1 100%)'\n      },\n      'Purple Belt': {\n        background: 'linear-gradient(135deg, #af7ac5 0%, #9b59b6 100%)',\n        hover: 'linear-gradient(135deg, #a569bd 0%, #8e44ad 100%)'\n      },\n      'Brown Belt': {\n        background: 'linear-gradient(135deg, #b7950b 0%, #a0522d 100%)',\n        hover: 'linear-gradient(135deg, #a68a0a 0%, #8b4513 100%)'\n      },\n      'Black Belt': {\n        background: 'linear-gradient(135deg, #566573 0%, #2c3e50 100%)',\n        hover: 'linear-gradient(135deg, #4a5a6b 0%, #273746 100%)'\n      },\n      'Brown/Black Stripe': {\n        background: 'linear-gradient(135deg, #b7950b 0%, #a0522d 100%)',\n        hover: 'linear-gradient(135deg, #a68a0a 0%, #8b4513 100%)',\n        isStriped: true\n      },\n      'White Belt': {\n        background: 'linear-gradient(135deg, #d5d8dc 0%, #aeb6bf 100%)',\n        hover: 'linear-gradient(135deg, #ccd1d6 0%, #a3acb5 100%)'\n      }\n    };\n\n    // Default color for unknown belts\n    return beltColors[beltName] || {\n      background: 'linear-gradient(135deg, #85929e 0%, #5d6d7e 100%)',\n      hover: 'linear-gradient(135deg, #7b8794 0%, #566573 100%)'\n    };\n  };\n  const toggleExpanded = () => {\n    setIsExpanded(!isExpandedState);\n    onToggleExpand();\n  };\n  const getTotalItems = () => {\n    return Object.values(categories).reduce((total, items) => {\n      return total + (Array.isArray(items) ? items.length : 0);\n    }, 0);\n  };\n  const getCategoryCount = () => {\n    return Object.keys(categories).length;\n  };\n  const beltColor = getBeltColor(belt);\n\n  // Debug logging\n  console.log('Belt:', belt, 'Color:', beltColor);\n\n  // Use cumulative categories if available, otherwise fall back to regular categories\n  const displayCategories = Object.keys(cumulativeCategories).length > 0 ? cumulativeCategories : categories;\n\n  // Filter categories to only include those that match search term if provided\n  const filteredCategories = searchTerm ? Object.entries(displayCategories).filter(([category, items]) => {\n    // Check if any item in this category matches the search term\n    return items.some(item => item.traditional && item.traditional.toLowerCase().includes(searchTerm.toLowerCase()) || item.english && item.english.toLowerCase().includes(searchTerm.toLowerCase()) || item.notes && item.notes.toLowerCase().includes(searchTerm.toLowerCase()));\n  }) : Object.entries(displayCategories);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"public-belt-section\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: `public-belt-header ${beltColor.isStriped ? 'striped-belt' : ''}`,\n      onClick: toggleExpanded,\n      style: {\n        background: beltColor.background,\n        '--hover-background': beltColor.hover\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: belt\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 106,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"belt-stats\",\n          children: [getCategoryCount(), \" categories \\u2022 \", getTotalItems(), \" techniques\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        className: `expand-icon ${isExpandedState ? 'expanded' : ''}`,\n        children: \"\\u25B6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), isExpandedState && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"public-belt-content\",\n      children: filteredCategories.map(([category, items]) => /*#__PURE__*/_jsxDEV(PublicCategorySection, {\n        category: category,\n        items: items,\n        searchTerm: searchTerm,\n        isCurrentBelt: isVisible\n      }, category, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n};\n_s(PublicBeltSection, \"nvz5DkZyWBjUBUmc8iT0nnoBOjU=\");\n_c = PublicBeltSection;\nexport default PublicBeltSection;\nvar _c;\n$RefreshReg$(_c, \"PublicBeltSection\");","map":{"version":3,"names":["React","useState","PublicCategorySection","jsxDEV","_jsxDEV","PublicBeltSection","belt","categories","cumulativeCategories","isExpanded","onToggleExpand","searchTerm","isVisible","_s","isExpandedState","setIsExpanded","getBeltColor","beltName","beltColors","background","hover","isStriped","toggleExpanded","getTotalItems","Object","values","reduce","total","items","Array","isArray","length","getCategoryCount","keys","beltColor","console","log","displayCategories","filteredCategories","entries","filter","category","some","item","traditional","toLowerCase","includes","english","notes","className","children","onClick","style","fileName","_jsxFileName","lineNumber","columnNumber","map","isCurrentBelt","_c","$RefreshReg$"],"sources":["/Users/lloydhird/development/PKSyllabus/client/src/components/PublicBeltSection.js"],"sourcesContent":["import React, { useState } from 'react';\nimport PublicCategorySection from './PublicCategorySection';\n\nconst PublicBeltSection = ({ belt, categories, cumulativeCategories, isExpanded, onToggleExpand, searchTerm, isVisible }) => {\n  const [isExpandedState, setIsExpanded] = useState(isExpanded);\n\n  // Get belt color based on belt name\n  const getBeltColor = (beltName) => {\n    const beltColors = {\n      'Red Belt': {\n        background: 'linear-gradient(135deg, #dc7373 0%, #c85a5a 100%)',\n        hover: 'linear-gradient(135deg, #d66666 0%, #c24d4d 100%)'\n      },\n      'Yellow Belt': {\n        background: 'linear-gradient(135deg, #f4d03f 0%, #f1c40f 100%)',\n        hover: 'linear-gradient(135deg, #f2ca2e 0%, #e8b800 100%)'\n      },\n      'Orange Belt': {\n        background: 'linear-gradient(135deg, #f39c12 0%, #e67e22 100%)',\n        hover: 'linear-gradient(135deg, #f08c00 0%, #d35400 100%)'\n      },\n      'Green Belt': {\n        background: 'linear-gradient(135deg, #58d68d 0%, #27ae60 100%)',\n        hover: 'linear-gradient(135deg, #4dd080 0%, #229954 100%)'\n      },\n      'Blue Belt': {\n        background: 'linear-gradient(135deg, #5dade2 0%, #3498db 100%)',\n        hover: 'linear-gradient(135deg, #52a3dd 0%, #2e86c1 100%)'\n      },\n      'Purple Belt': {\n        background: 'linear-gradient(135deg, #af7ac5 0%, #9b59b6 100%)',\n        hover: 'linear-gradient(135deg, #a569bd 0%, #8e44ad 100%)'\n      },\n      'Brown Belt': {\n        background: 'linear-gradient(135deg, #b7950b 0%, #a0522d 100%)',\n        hover: 'linear-gradient(135deg, #a68a0a 0%, #8b4513 100%)'\n      },\n      'Black Belt': {\n        background: 'linear-gradient(135deg, #566573 0%, #2c3e50 100%)',\n        hover: 'linear-gradient(135deg, #4a5a6b 0%, #273746 100%)'\n      },\n      'Brown/Black Stripe': {\n        background: 'linear-gradient(135deg, #b7950b 0%, #a0522d 100%)',\n        hover: 'linear-gradient(135deg, #a68a0a 0%, #8b4513 100%)',\n        isStriped: true\n      },\n      'White Belt': {\n        background: 'linear-gradient(135deg, #d5d8dc 0%, #aeb6bf 100%)',\n        hover: 'linear-gradient(135deg, #ccd1d6 0%, #a3acb5 100%)'\n      }\n    };\n\n    // Default color for unknown belts\n    return beltColors[beltName] || {\n      background: 'linear-gradient(135deg, #85929e 0%, #5d6d7e 100%)',\n      hover: 'linear-gradient(135deg, #7b8794 0%, #566573 100%)'\n    };\n  };\n\n  const toggleExpanded = () => {\n    setIsExpanded(!isExpandedState);\n    onToggleExpand();\n  };\n\n  const getTotalItems = () => {\n    return Object.values(categories).reduce((total, items) => {\n      return total + (Array.isArray(items) ? items.length : 0);\n    }, 0);\n  };\n\n  const getCategoryCount = () => {\n    return Object.keys(categories).length;\n  };\n\n  const beltColor = getBeltColor(belt);\n  \n  // Debug logging\n  console.log('Belt:', belt, 'Color:', beltColor);\n\n  // Use cumulative categories if available, otherwise fall back to regular categories\n  const displayCategories = Object.keys(cumulativeCategories).length > 0 ? cumulativeCategories : categories;\n  \n  // Filter categories to only include those that match search term if provided\n  const filteredCategories = searchTerm\n    ? Object.entries(displayCategories).filter(([category, items]) => {\n        // Check if any item in this category matches the search term\n        return items.some(item => \n          (item.traditional && item.traditional.toLowerCase().includes(searchTerm.toLowerCase())) ||\n          (item.english && item.english.toLowerCase().includes(searchTerm.toLowerCase())) ||\n          (item.notes && item.notes.toLowerCase().includes(searchTerm.toLowerCase()))\n        );\n      })\n    : Object.entries(displayCategories);\n\n  return (\n    <div className=\"public-belt-section\">\n      <div \n        className={`public-belt-header ${beltColor.isStriped ? 'striped-belt' : ''}`}\n        onClick={toggleExpanded}\n        style={{\n          background: beltColor.background,\n          '--hover-background': beltColor.hover\n        }}\n      >\n        <div>\n          <h2>{belt}</h2>\n          <div className=\"belt-stats\">\n            {getCategoryCount()} categories • {getTotalItems()} techniques\n          </div>\n        </div>\n        <span className={`expand-icon ${isExpandedState ? 'expanded' : ''}`}>\n          ▶\n        </span>\n      </div>\n      \n      {isExpandedState && (\n        <div className=\"public-belt-content\">\n          {filteredCategories.map(([category, items]) => (\n            <PublicCategorySection\n              key={category}\n              category={category}\n              items={items}\n              searchTerm={searchTerm}\n              isCurrentBelt={isVisible}\n            />\n          ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\nexport default PublicBeltSection;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}